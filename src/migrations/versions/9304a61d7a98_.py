"""empty message

Revision ID: 9304a61d7a98
Revises: 4c386ff0df46
Create Date: 2025-04-23 16:31:25.070022

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "9304a61d7a98"
down_revision: Union[str, None] = "4c386ff0df46"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Ensure the clients table exists before altering it
    op.create_table(
        "clients",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('clients_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("username", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column(
            "client_avatar_url",
            sa.VARCHAR(length=500),
            autoincrement=False, nullable=True,
        ),
        sa.Column(
            "phone_number", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="clients_pkey"),
        postgresql_ignore_search_path=False,
    )
    # Increase the length of the email column in the clients table
    op.alter_column(
        "clients",
        "email",
        existing_type=sa.VARCHAR(length=20),
        type_=sa.VARCHAR(length=100),
        existing_nullable=False,
    )
    # Drop the foreign key constraint on the orders table
    op.drop_constraint(
        "orders_client_id_fkey",
        "orders",
        type_="foreignkey"
    )
    # Drop the orders table
    op.drop_table("orders")
    # Drop the foreign key constraint on the m2m_jewelers_clients table
    op.drop_constraint(
        "m2m_jewelers_clients_client_id_fkey",
        "m2m_jewelers_clients",
        type_="foreignkey"
    )
    # Drop the m2m_jewelers_clients table
    op.drop_table("m2m_jewelers_clients")
    # Drop the jewelers table
    op.drop_table("jewelers")
    # Drop the clients table
    op.drop_table("clients")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "clients",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('clients_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("username", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column(
            "client_avatar_url",
            sa.VARCHAR(length=500),
            autoincrement=False, nullable=True,
        ),
        sa.Column(
            "phone_number", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="clients_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "jewelers",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('jewelers_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("username", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(length=30), autoincrement=False, nullable=False),
        sa.Column(
            "workload",
            postgresql.ENUM(
                "repair", "production", "production_and_repair", name="workload"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "portfolio", sa.VARCHAR(length=500), autoincrement=False, nullable=True
        ),
        sa.Column(
            "jeweler_avatar_url",
            sa.VARCHAR(length=500),
            autoincrement=False, nullable=True,
        ),
        sa.Column(
            "phone_number", sa.VARCHAR(length=30), autoincrement=False, nullable=False
        ),
        sa.Column(
            "address", sa.VARCHAR(length=256), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="jewelers_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "m2m_jewelers_clients",
        sa.Column("jeweler_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("client_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("cover_letter", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["client_id"],
            ["clients.id"],
            name="m2m_jewelers_clients_client_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["jeweler_id"],
            ["jewelers.id"],
            name="m2m_jewelers_clients_jeweler_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "jeweler_id", "client_id", name="m2m_jewelers_clients_pkey"
        ),
    )
    op.create_table(
        "orders",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("title", sa.VARCHAR(length=256), autoincrement=False, nullable=False),
        sa.Column(
            "order_avatar_url",
            sa.VARCHAR(length=500),
            autoincrement=False, nullable=True,
        ),
        sa.Column(
            "workload",
            postgresql.ENUM(
                "repair", "production", "production_and_repair", name="workload"
            ),
            autoincrement=False, nullable=False,
        ),
        sa.Column("compensation", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("jeweler_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, now())"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text(
                "timezone('utc'::text, (now() + '1 day'::interval))"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("client_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["client_id"],
            ["clients.id"],
            name="orders_client_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["jeweler_id"], ["jewelers.id"], name="orders_jeweler_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="orders_pkey"),
    )
    # Recreate the foreign key constraints
    op.create_foreign_key(
        "orders_client_id_fkey",
        "orders",
        "clients",
        ["client_id"],
        ["id"],
        ondelete="CASCADE"
    )
    op.create_foreign_key(
        "m2m_jewelers_clients_client_id_fkey",
        "m2m_jewelers_clients",
        "clients",
        ["client_id"],
        ["id"],
        ondelete="CASCADE"
    )
    # Revert the length of the email column in the clients table
    op.alter_column(
        "clients",
        "email",
        existing_type=sa.VARCHAR(length=100),
        type_=sa.VARCHAR(length=20),
        existing_nullable=False,
    )
    # ### end Alembic commands ###
